======================================================================================================================================================
====================================================OOP - Object Oriented Programming=================================================================
- Mọi thứ đều là object, object có thuộc tính và hành vi:
  + Atrribute, DataMember,Property: Là những thuộc tính của object
  + Methods, Function, Behavior  : Là những hành vi của object

- Class:
  + Là một bản thiết kế của đối tượng trong code
  
======================================================================================================================================================
====================================================WEB APPS==========================================================================================
- DNS là gì?
  + Hệ thống phân giải tên miên (Domain name system)
  + Là cuốn sách tra cứu địa chỉ của domain name
  
- Domain Name là gì?
  + Tên nhà mà không cần biết địa chỉ (Không được trùng)
  
- Hosting là gì?
  + Dịch vụ lưu trữ web (WEB hosting service)
  + Giống như một nơi ở mà chứa các tập tin
  
- IP là gì?
  + Địa chỉ của máy, server
  
======================================================================================================================================================
====================================================ANGULAR===========================================================================================
1. SET UP ENVIRONMET
   + Install NodeJs (npm)
     node -v
	 npm -v
	 
   ***************************************************************************************************************************************************
   + Install Angular Cli
     1. npm install @angular/cli
	 2. npm install -g @angular/core @angular/cli
	 3. ng --version
	 4. ng new <NameProject>
	   * =>  y => Select SCSS => Enter
	   * if error: run: npm config set legacy-peer-deps true
	 5.npm start / ng server
	 6. ng build
	 
   ***************************************************************************************************************************************************
   + Install VS Code
     code -v
	 
   ***************************************************************************************************************************************************
   + Install Git bash
     git --version
	 
======================================================================================================================================================
2. PROJECT STRUCTURE
   + Node_Module:
     * gitignore: không đẩy code lên git
	 * node_module: chứa các thư viện, sau khi build sẽ lấy các thư viện đó ra để 
	 * angular.json: tùy chỉnh angular, add css, javascript ở đây
	 * Package.json: chứa các thư viện đã cài đặt
	 * tsconfig.json: cài đặt compie typescript
	 * src
	   1. environments: chứa các file config environment is develop or production
	   2. assets: chứa các hình ảnh, video, icon, ...
	   3. index.html: page chính
	      + <app-root></app-root> : component/thẻ tự đặt tên (thường là app component)
		  
======================================================================================================================================================
3. COMPONENTS
   + Là thành phần được chia nhỏ, có thể chạy độc lập và được tạo ra nhắm mục đích tái sử dụng
   
   ***************************************************************************************************************************************************
   + Các thành phần:
     * component.html: chứa code html
	 * component.scss: chưa css cho component
	 * component.spect.ts: nơi viết unit test/ test
	 * component.ts: nơi viết logic cho component băng typescript
	   @Component
	   + selector: đặt tên tag cho component này
	   + templateUrl: html của component này ở đâu
	   + styleUrls: Các files css mà component này sử dụng
	   
   ***************************************************************************************************************************************************
   + Command
     ng g c <NameComponent>
	 ng generate component <NameComponent>
	 
======================================================================================================================================================
4. BUILD - DEPLOY
   + ng build / ng build --base-href /<nameproject>/ --deploy-url /<nameproject>/ --configuration production
     => dist 
	     
====================================================================================================================================================== 
5. MODULE
   + module.ts
     * @NgModule
	   1. declarations: 
	      + Khai báo các component chúng ta sẽ dùng ở trên template (thường là component, directive, pipe)
		  + chỉ có thể được sử dụng trong nội bộ module đó
		  
	   2. providers:
	      + Khai báo các service dùng trong toàn bộ các module (dù có lazy loading module hay không vẫn available)
		  + Sử dụng được trong toàn bộ dự án. Nghĩa là các service chỉ cần được khai báo ở bất kỳ module con nào, 
		    khi import vào module chính sẽ PUBLIC SINGLE INSTANCE trên toàn bộ module con và module chính
			=> Nếu module được import để sử dụng các service thì chúng ta chỉ nên import nó 1 lần trong module chính
			
	   3. imports: 
	      + Là một mảng các module cần thiết để được sử dụng trong ứng dụng. Nó cũng có thể được sử dụng bởi các component trong mảng
	   4. boostrap:
          + Định nghĩa component gốc của module 
   
   ***************************************************************************************************************************************************
   + Lazy Loading Module:
     * Nghĩa là khi người dùng vào những đường dẫn của từng feature thì module đó mới được load 
	 * Những service chúng ta provide trong lazy load module sẽ có tính chất:
	   1. Nó chỉ available trong lazy load module trở xuống, các module bên ngoài sẽ không thấy
	   2. Nếu lazy load module provide service giống AppModule thì nó sẽ tạo ra instance mới
	   
	 * VD:
	   --- Admin module
	    admin.routing.ts
			const routes: Routes = [
			  {
				path: 'users',
				component: UsersListComponent,
			  },
			  {
				path: 'users/:id',
				component: UserDetailComponent
			  },
			  {
				path: '',
				component: AdminHomeComponent,
			  }
			];

			@NgModule({
			  declarations: [],
			  imports: [
				CommonModule,
				RouterModule.forChild(routes)
			  ],
			  exports: [RouterModule]
			})
			export class AdminRouting { }
		------------------------------------------------------------
		admin.module.ts
			@NgModule({
			  declarations: [UsersListComponent, UserDetailComponent, AdminHomeComponent],
			  imports: [
				CommonModule,
				AdminRouting
			  ],
			  providers: [
				AdminService
			  ]
			})
			export class AdminModule { }
		------------------------------------------------------------			
	   --- App module:
	    app-routing.module.ts
			const routes: Routes = [
			  {
				path: '',
				children: [
				  {
					path: 'admin',
					loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule)
				  },
				  {
					path: 'teacher',
					loadChildren: () => import('./teacher/teacher.module').then(m => m.TeacherModule)
				  },
				  {
					path: 'student',
					loadChildren: () => import('./student/student.module').then(m => m.StudentModule)
				  }
				]
			  }
			];

			@NgModule({
			  imports: [RouterModule.forRoot(routes)],
			  exports: [RouterModule]
			})
			export class AppRoutingModule { }
		------------------------------------------------------------
		app.module.ts
			@NgModule({
			  declarations: [
				AppComponent
			  ],
			  imports: [
				BrowserModule,
				AppRoutingModule,
			  ],
			  providers: [],
			  bootstrap: [AppComponent]
			})
			export class AppModule { }
		
   ***************************************************************************************************************************************************
   + PreLoad
     * Cải thiện trải nghiệm người dùng khi lazy load module
	 * Trường hợp với các thiết bị di động hay những kết nối băng thông thấp thì việc preload có thể không phải là lựa chọn đúng đắn
	 * VD:
	    app.routing.ts
			imports: [
				RouterModule.forRoot(
				  routes, { preloadingStrategy: PreloadAllModules }
				)
			],
	 * Custom PreloadingStrategy
	    custom-preloading.ts
			import 'rxjs/add/observable/of';
			import { Injectable } from '@angular/core';
			import { PreloadingStrategy, Route } from '@angular/router';
			import { Observable } from 'rxjs/Observable';

			@Injectable()
			export class CustomPreloadingStrategy implements PreloadingStrategy {
			  preloadedModules: string[] = [];

			  preload(route: Route, load: () => Observable<any>): Observable<any> {
				if (route.data && route.data['preload']) {
				  this.preloadedModules.push(route.path);
				  return load();
				} else {
				  return Observable.of(null);
				}
			  }
			}
		------------------------------------------------------------
		
		app.routing.ts
			const routes: Routes = [
			  {
				path: '',
				children: [
				  {
					path: 'admin',
					loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule),
					data: { preload: true }
				  },
				]
			  }
			];
			@NgModule({
			  imports: [RouterModule.forRoot(routes, { preloadingStrategy: CustomPreloadingStrategy })],
			  exports: [RouterModule],
			  providers: [CustomPreloadingStrategy]
			})
			export class AppRoutingModule { }
			
   ***************************************************************************************************************************************************
   + Command
     ng g m <NameModule>
     ng generate module <NameModule>	
     ng generate module <NameModule> --routing	 
 
======================================================================================================================================================
6. DATA BINDING
   + VALUE BINDING:
     * Kết nối giá trị từ code ra HTML
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2>Chào ban {{ name }}</h2>
		</div>
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name = 'Trong Hoang';
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
		}
		
   ***************************************************************************************************************************************************
   + PROPERTIES BINDING
     * Kết nối giá trị từ code ra HTML vào thẻ Input
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2>Chào ban {{ name }}</h2>
			<input value="{{ name }}" />
			<br />
			<input [value]="name" title="đây là {{ name }}" />
			<br />
			<input [value]="name" [title]="'đây là ' + name" />
		</div>
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name = 'Trong Hoang';
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
		}
		
   ***************************************************************************************************************************************************
   + *ngIf
     * Dùng if else trong HTML
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2>Chào ban {{ name }}</h2>
			<input value="{{ name }}" />
			<br />
			<h2 *ngIf="age > 18">Bạn đã già</h2>
			<br />
			<h2 *ngIf="age <= 18">Bạn còn trẻ lắm</h2>
		</div>
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name: string = 'Trong Hoang';
			public age: number = 15;
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
		}
	 
   ***************************************************************************************************************************************************
   + EVENT BINDING
     * Binding event
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2>Chào ban {{ name }}</h2>
			<input type="Text" [value]="name" />
			<br />
			<button (click) = "resetName()" >Reset Name </button>
		</div>
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name: string = 'Trong Hoang';
			public age: number = 15;
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
			
			public resetName(): void{
				console.log('reset name');
			
			}
		}
		
		
   ***************************************************************************************************************************************************
   + TWO WAY - BINDING
     * ngModel
	   1. Là một directive dùng đểliên kết dữ liệu với client
	   2. Syntax: [()] = [] (binds attribute) + () (binds event)
	   3. Need import { FormsModule } from '@angular/forms';
	   
   ***************************************************************************************************************************************************
   + ng-template
     * if then else trong HTML
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2>Chào ban {{ name }}</h2>
			<input type="Text" [(ngModel)]="age" />
			<br />
			
			<div *ngIf="age <= 18 then tre; else gia">
				
			</div>
			
			<ng-template #tre><h2>Bạn đã già</h2></ng-template>
			<ng-template #gia><h2>Bạn còn trẻ lắm</h2></ng-template>
		</div>
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name: string = 'Trong Hoang';
			public age: number = 15;
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
		}
	 
   ***************************************************************************************************************************************************
   + *ngFor
     * Vòng lặp trong HTML
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2> Trái cây </h2>
			<div *ngFor="let item of traicay; let i = index">
				<li>{{ i+1 }}. {{ item    }}</li>
			</div>
			
			<table>
				<tr>
					<th>STT</th>
					<th>Name</th>
					<th>Price</th>
				</tr>
				
				<tr *ngFor="let item of traicay2; let i = index">
					<td>{{ i+1 }}</td>
					<td>{{ item.ten }}</td>
					<td>
						<span [ngClass]="{'so-am' : item.gia < 0}">{{ item.gia }}</span>
					</td>
					<td>
						<span *ngIf="item.haGia">On Sale</span>
					</td>
				</tr>
			</table>
		</div>
		------------------------------------------------------------
	   home.component.scss
	    .th, td {
			min-width: 100px;
		}
	   
	    .so-am{
			color: red;
		}
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name: string = 'Trong Hoang';
			public age: number = 15;
			public traicay = ['Tao' , 'Nho'];
			public traicay2 = [
				{ ten: Tao, gia: 12, haGia: true },
				{ ten: Nho, gia: -3, haGia: false }
			]
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
		}
		
====================================================================================================================================================== 
7. PIPE
   + Định dạng dữ liệu (price, datetime,...)
   + DatePipe
     * Syntax {{ value | date [ : format [ : timezone [ : locale ] ]] }}
	 * format, timezone, locale : string (default is underfined)
	 
   + UpperCasePipe:
     * Syntax {{ value | uppercase }}
	 
   + LowerCasePipe:
     * Syntax {{ value | lowercase }}
	 
   + CurencyPipe:
     * Syntax {{ value | curency [ : curencyCode [ : display [ : digitsInfo [ : locale ] ] ] ] }}
	 
   + DecimalPipe:
     * Syntax {{ value | number [ : digitsInfo [ : locale ]]  }}
	 
   + PercentPipe:
     * Syntax {{ value | percent [ : digitsInfo [ : locale ]]  }}
	 
   + Custom Pipe:
     * Command: ng generate pipe <NameCustomPipe>
	 * VD: ng generate pipe OnSale
	   on-sale.pipe.ts
		import { Pipe, PipeTransform } from '@angular/core';
		
		@Pipe({
			name: 'onSale'
		})
		
		export class OnSalePipe implements PipeTransform {
			transform(value: unknown, ...args: unknown[]): string{
			    if(value){
					return 'On Sale'
				}
				return '';
			}
		
		}
		
		------------------------------------------------------------
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2> Trái cây </h2>
			<div *ngFor="let item of traicay; let i = index">
				<li>{{ i+1 }}. {{ item    }}</li>
			</div>
			
			<table>
				<tr>
					<th>STT</th>
					<th>Name</th>
					<th>Price</th>
				</tr>
				
				<tr *ngFor="let item of traicay2; let i = index">
					<td>{{ i+1 }}</td>
					<td>{{ item.ten }}</td>
					<td>
						<span [ngClass]="{'so-am' : item.gia < 0}">{{ item.gia }}</span>
					</td>
					<td>
						<span>{{ iten.haGia | onSale | uppercase }}</span>
					</td>
				</tr>
			</table>
		</div>
		------------------------------------------------------------
	   home.component.scss
	    .th, td {
			min-width: 100px;
		}
	   
	    .so-am{
			color: red;
		}
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name: string = 'Trong Hoang';
			public age: number = 15;
			public traicay = ['Tao' , 'Nho'];
			public traicay2 = [
				{ ten: Tao, gia: 12, haGia: true },
				{ ten: Nho, gia: -3, haGia: false }
			]
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
		}
		
====================================================================================================================================================== 
8. CASCADING COMBOBOX
   
	 * VD:
	   home.component.html
		<div>
			<h1> Đây là component home </h1>
			<h2> Trái cây </h2>
			
			<select id="city" (change)="changeCity($event)">
				<option *ngFor="let data of vietnameData" value="{{data.city}}">{{data.city}}</option>
			</select>
			
			<select id="district">
				<option *ngFor="let data of districts" value="{{data}}">{{data}}</option>
			</select>
		</div>
		------------------------------------------------------------
	   home.component.ts
	    import {Component, OnInit } from '@angular/core';
		
		@Component({
			selector: 'app-home',
			templateUrl: './home.component.html',
			styleUrls: ['./home.component.scss']
		})
		
		export class HomeComponent implements OnInit{
			public name: string = 'Trong Hoang';
			public age: number = 15;
			public traicay = ['Tao' , 'Nho'];
			public traicay2 = [
				{ ten: Tao, gia: 12, haGia: true },
				{ ten: Nho, gia: -3, haGia: false }
			]
		
			public vietnameData = [
			    {
				  city: 'Select city'
				  district: []
				},
				{
				  city: 'An Giang',
				  district: [
					'Thành phố Long Xuyên',
					'Thành phố Châu Đốc',
					'Thị xã Tân Châu',
					'Huyện An Phú',
					'Huyện Châu Phú',
					'Huyện Châu Thành',
					'Huyện Chợ Mới',
					'Huyện Phú Tân',
					'Huyện Thoại Sơn',
					'Huyện Tịnh Biên',
					'Huyện Tri Tôn',
				  ],
				},
				{
				  city: 'Bà Rịa - Vũng Tàu',
				  district: [
					'Thành phố Vũng Tàu',
					'Thị xã Bà Rịa',
					'Thị xã Phú Mỹ',
					'Huyện Châu Đức',
					'Huyện Côn Đảo',
					'Huyện Đất Đỏ',
					'Huyện Long Điền',
					'Huyện Tân Thành',
					'Huyện Xuyên Mộc',
				  ],
				},
				{
				  city: 'Bạc Liêu',
				  district: [
					'Thành phố Bạc Liêu',
					'Huyện Đông Hải',
					'Huyện Giá Rai',
					'Huyện Hòa Bình',
					'Huyện Hồng Dân',
					'Huyện Phước Long',
					'Huyện Vĩnh Lợi',
				  ],
				},
			];
			
			public districts: string[] = [];
		
			constructor() {}
			
			ngOnInit(): void {
				
			}
			
			public changeCity(event : any) : void {
				const city = event.target.value;
				console.log('event', city);
				
				if(!city){
					return;
				}
				
				//// Cách 1:
				// const search = this.vietnameData.filter(x => x.city === city);
				// console.log('search', search);
				
				// if(search && search.length > 0){
				//	this.districts = search[0].district;
				// }
				
				//// Cách 2:
				this.districts = this.vietnameData.find(x => x.city === city)?.district || [];
			}
		}